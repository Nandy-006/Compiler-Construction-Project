program -> funcOrStatement
program -> ''
funcOrStatement -> functionDefinition funcOrStatement
funcOrStatement -> statement funcOrStatement

keyword -> "whil"
keyword -> "if"
keyword -> "else"
keyword -> "stonks"
keyword -> "not_stonks"
keyword -> "retun"
keyword -> "intijur"
keyword -> "flote"
keyword -> "bulen"
keyword -> "strin"
keyword -> "funkshun"
keyword -> "array"
keyword -> "coll"
keyword -> "null"
keyword -> "let"
keyword -> "char"

symbol -> "{"
symbol -> "}"
symbol -> "("
symbol -> ")"
symbol -> "["
symbol -> "]"
symbol -> ";"
symbol -> ","
symbol -> "+"
symbol -> "-"
symbol -> "*"
symbol -> "/"
symbol -> "%"
symbol -> ">"
symbol -> "<"
symbol -> ">="
symbol -> "<="
symbol -> "=="
symbol -> "!="
symbol -> "="
symbol -> "||"
symbol -> "&&"
symbol -> "!"

arithmeticOperator -> "+"
arithmeticOperator -> "-"
arithmeticOperator -> "*"
arithmeticOperator -> "/"
arithmeticOperator -> "%"

relationalOperator -> ">"
relationalOperator -> "<"
relationalOperator -> ">="
relationalOperator -> "<="
relationalOperator -> "=="
relationalOperator -> "!="

logicalOperator -> "||"
logicalOperator -> "&&" 

operator -> arithmeticOperator
operator -> relationalOperator
operator -> logicalOperator

unaryOperator -> "-"
unaryOperator -> "+"
unaryOperator -> "!"

delimiter -> "{"
delimiter -> "}"
delimiter -> "("
delimiter -> ")"
delimiter -> "["
delimiter -> "]"
delimiter -> ";"
delimiter -> ","

lowerCaseAlphabet -> 'a'
lowerCaseAlphabet -> 'b'
lowerCaseAlphabet -> 'c'
lowerCaseAlphabet -> 'd'
lowerCaseAlphabet -> 'e'
lowerCaseAlphabet -> 'f'
lowerCaseAlphabet -> 'g'
lowerCaseAlphabet -> 'h'
lowerCaseAlphabet -> 'i'
lowerCaseAlphabet -> 'j'
lowerCaseAlphabet -> 'k'
lowerCaseAlphabet -> 'l'
lowerCaseAlphabet -> 'm'
lowerCaseAlphabet -> 'n'
lowerCaseAlphabet -> 'o'
lowerCaseAlphabet -> 'p'
lowerCaseAlphabet -> 'q'
lowerCaseAlphabet -> 'r'
lowerCaseAlphabet -> 's'
lowerCaseAlphabet -> 't'
lowerCaseAlphabet -> 'u'
lowerCaseAlphabet -> 'v'
lowerCaseAlphabet -> 'w'
lowerCaseAlphabet -> 'x'
lowerCaseAlphabet -> 'y'
lowerCaseAlphabet -> 'z'

upperCaseAlphabet -> 'A'
upperCaseAlphabet -> 'B'
upperCaseAlphabet -> 'C'
upperCaseAlphabet -> 'D'
upperCaseAlphabet -> 'E'
upperCaseAlphabet -> 'F'
upperCaseAlphabet -> 'G'
upperCaseAlphabet -> 'H'
upperCaseAlphabet -> 'I'
upperCaseAlphabet -> 'J'
upperCaseAlphabet -> 'K'
upperCaseAlphabet -> 'L'
upperCaseAlphabet -> 'M'
upperCaseAlphabet -> 'N'
upperCaseAlphabet -> 'O'
upperCaseAlphabet -> 'P'
upperCaseAlphabet -> 'Q'
upperCaseAlphabet -> 'R'
upperCaseAlphabet -> 'S'
upperCaseAlphabet -> 'T'
upperCaseAlphabet -> 'U'
upperCaseAlphabet -> 'V'
upperCaseAlphabet -> 'W'
upperCaseAlphabet -> 'X'
upperCaseAlphabet -> 'Y'
upperCaseAlphabet -> 'Z'

alphabet -> lowerCaseAlphabet
alphabet -> upperCaseAlphabet
alphabet -> '_'

alphabets -> alphabet moreAlphabets
moreAlphabets -> alphabet moreAlphabets
moreAlphabets -> ''

number -> digit moreDigits
moreDigits -> digit moreDigits
moreDigits -> ''
digit -> 0
digit -> 1
digit -> 2
digit -> 3
digit -> 4
digit -> 5
digit -> 6
digit -> 7
digit -> 8
digit -> 9

alphanumeral -> alphabets alphanumeral 
alphanumeral -> number alphanumeral
alphanumeral -> ''

constant -> integerConstant
constant -> floatConstant
constant -> booleanConstant
constant -> stringConstant
constant -> charConstant
constant -> "null"

integerConstant -> number
integerConstant -> '+' number
integerConstant -> '-' number

floatConstant -> signNumber floatPart
floatPart -> '.' number exponentPart
floatPart -> exponentPart
exponentPart -> 'E' signExponentPart signNumber
exponentPart -> 'e' signExponentPart signNumber
exponentPart -> ''
signNumber -> '+' number
signNumber -> '-' number
signNumber -> number

booleanConstant	-> "stonks"
booleanConstant	-> "not_stonks"

stringConstant	-> "\"" (.*) "\""

arrayConstant -> "[" ( constant "]"
arrayConstant -> "[" ( constant commaConst "]"
commaConst -> ',' constant commaConst
commaConst -> ''

charConstant -> "'" (.) "'"

dataType -> "intijur"
dataType -> "flote"
dataType -> "bulen"
dataType -> "strin"
dataType -> "char"
dataType -> arrayType

arrayType -> "array" "<" elementType ">"
elementType -> "flote"
elementType -> "bulen"
elementType -> "strin"
elementType -> "intijur"


identifier -> alphabets
identifier -> alphabets alphanumeral

varName -> identifier

term -> constant
term -> varName
term -> varName "[" expression "]"
term -> "(" expression ")"
term -> functionCall
term -> unaryOperator term

statement -> declarationStatement
statement -> letStatement
statement -> ifStatement
statement -> whileStatement
statement -> callStatement
statement -> returnStatement

declarationStatement -> dataType varName ";"
declarationStatement -> dataType varName commaVar ";"
declarationStatement -> dataType varName "=" expression ";"
declarationStatement -> dataType varName "=" expression commaVar ";"
commaVar -> ',' varName commaVar
commaVar -> ''

letStatement -> "let" varName "[" expression "]" "=" expression ";"
letStatement -> "let" varName "=" expression ";"
letStatement -> "let" varName "=" arrayExpression ";" 

ifStatement -> "if" "(" expression ")" "{" statements "}" "else" "{" statements "}"
ifStatement -> "if" "(" expression ")" "{" statements "}" 

whileStatement -> "whil" "(" expression ")" "{" "}"
whileStatement -> "whil" "(" expression ")" "{" statements "}"

callStatement -> "coll" functionCall

returnStatement -> "retun" expression ";"
returnStatement -> "retun" arrayExpression ";"

expression -> term 
expression -> term opTerm
opTerm -> operator term opTerm
opTerm -> ''

arrayExpression -> "[" expression "]"
arrayExpression -> "[" expression commaExpr "]"
commaExpr -> ',' expression commaExpr
commaExpr -> ''

functionDefinition -> dataType "funkshun" functionName "(" parameterList ")" { returnStatement }
functionDefinition -> dataType "funkshun" functionName "(" parameterList ")" { statements returnStatement }
statements -> statement statements
statements -> ''

parameterList -> dataType identifier commaDataID
parameterList -> ''
commaDataID -> "," dataType identifier commaDataID
commaDataID -> ''

functionCall -> functionName "(" ")" ";"
functionCall -> functionName "(" term commaTerm ")" ";"
commaTerm -> "," term commaTerm
commaTerm -> ''
functionName -> identifier
