program -> funcOrStatement
program -> ''
funcOrStatement -> functionDefinition funcOrStatement
funcOrStatement -> statement funcOrStatement
funcOrStatement -> ''

arithmeticOperator -> +
arithmeticOperator -> -
arithmeticOperator -> *
arithmeticOperator -> /
arithmeticOperator -> %
 
relationalOperator -> >
relationalOperator -> <
relationalOperator -> >=
relationalOperator -> <=
relationalOperator -> ==
relationalOperator -> !=
 
logicalOperator -> ||
logicalOperator -> && 
 
operator -> arithmeticOperator
functionName -> IDENTIFIER
operator -> logicalOperator

constant -> LITERAL_INT
constant -> LITERAL_FLOAT
constant -> booleanConstant
constant -> LITERAL_STRING
constant -> LITERAL_CHAR
constant -> null

booleanConstant -> stonks
booleanConstant -> not_stonks
 
arrayConstant -> [ ]
arrayConstant -> [ term commaConst ]
arrayConstant -> [ term ]
commaConst -> , term commaConst
commaConst -> , term
 
dataType -> intijur
dataType -> flote
dataType -> bulen
dataType -> strin
dataType -> char
dataType -> arrayType
 
arrayType -> array < elementType >
elementType -> flote
elementType -> bulen
elementType -> strin
elementType -> intijur
 
varName -> IDENTIFIER
 
term -> constant
term -> varName
term -> varName [ expression ]
term -> ( expression )
term -> functionCall
term -> ! term
term -> - term
 
statement -> declarationStatement
statement -> letStatement
statement -> ifStatement
statement -> whileStatement
statement -> callStatement
statement -> returnStatement

declarationStatement -> dataType declare ;
declare -> varName
declare -> varName = expression
declare -> varName , declare
declare -> varName = expression , declare
 
letStatement -> let varName [ expression ] = expression ;
letStatement -> let varName = expression ;
letStatement -> let varName = arrayExpression ; 
 
ifStatement -> if ( expression ) { } else { }
ifStatement -> if ( expression ) { }
ifStatement -> if ( expression ) { } else { statements }
ifStatement -> if ( expression ) { statements }
ifStatement -> if ( expression ) { statements } else { }
ifStatement -> if ( expression ) { statements } else { statements }
 
whileStatement -> whil ( expression ) { statements }
whileStatement -> whil ( expression ) { }
 
callStatement -> coll functionCall ;
 
returnStatement -> retun expression ;
returnStatement -> retun arrayExpression ;
 
expression -> term operator expression
expression -> term relationalOperator expression
expression -> term
 
arrayExpression -> [ expression ]
arrayExpression -> [ expression commaExpr ]
commaExpr -> , expression commaExpr
commaExpr -> , expression
 
functionDefinition -> dataType funkshun functionName ( parameterList ) { statements returnStatement }
functionDefinition -> dataType funkshun functionName ( parameterList ) { returnStatement }
functionDefinition -> dataType funkshun functionName ( ) { statements returnStatement }
functionDefinition -> dataType funkshun functionName ( ) { returnStatement }
statements -> statements statement
statements -> statement
 
parameterList -> dataType IDENTIFIER commaDataID
parameterList -> dataType IDENTIFIER
 
commaDataID -> , dataType IDENTIFIER commaDataID
commaDataID -> , dataType IDENTIFIER
 
functionCall -> functionName ( )
functionCall -> functionName ( term commaTerm )
functionCall -> functionName ( term )
commaTerm -> , term commaTerm
commaTerm -> , term