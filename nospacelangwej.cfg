S' -> program
program -> funcOrStatement
program -> ''
funcOrStatement -> functionDefinition funcOrStatement
funcOrStatement -> statement funcOrStatement

keyword -> whil
keyword -> if
keyword -> else
keyword -> stonks
keyword -> not_stonks
keyword -> retun
keyword -> intijur
keyword -> flote
keyword -> bulen
keyword -> strin
keyword -> funkshun
keyword -> array
keyword -> coll
keyword -> null
keyword -> let
keyword -> char

symbol -> {
symbol -> }
symbol -> (
symbol -> )
symbol -> [
symbol -> ]
symbol -> ;
symbol -> ,
symbol -> +
symbol -> -
symbol -> *
symbol -> /
symbol -> %
symbol -> >
symbol -> <
symbol -> >=
symbol -> <=
symbol -> ==
symbol -> !=
symbol -> =
symbol -> ||
symbol -> &&
symbol -> !

arithmeticOperator -> +
arithmeticOperator -> -
arithmeticOperator -> *
arithmeticOperator -> /
arithmeticOperator -> %

relationalOperator -> >
relationalOperator -> <
relationalOperator -> >=
relationalOperator -> <=
relationalOperator -> ==
relationalOperator -> !=

logicalOperator -> ||
logicalOperator -> && 

operator -> arithmeticOperator
operator -> relationalOperator
operator -> logicalOperator

delimiter -> {
delimiter -> }
delimiter -> (
delimiter -> )
delimiter -> [
delimiter -> ]
delimiter -> ;
delimiter -> ,

lowerCaseAlphabet -> a
lowerCaseAlphabet -> b
lowerCaseAlphabet -> c
lowerCaseAlphabet -> d
lowerCaseAlphabet -> e
lowerCaseAlphabet -> f
lowerCaseAlphabet -> g
lowerCaseAlphabet -> h
lowerCaseAlphabet -> i
lowerCaseAlphabet -> j
lowerCaseAlphabet -> k
lowerCaseAlphabet -> l
lowerCaseAlphabet -> m
lowerCaseAlphabet -> n
lowerCaseAlphabet -> o
lowerCaseAlphabet -> p
lowerCaseAlphabet -> q
lowerCaseAlphabet -> r
lowerCaseAlphabet -> s
lowerCaseAlphabet -> t
lowerCaseAlphabet -> u
lowerCaseAlphabet -> v
lowerCaseAlphabet -> w
lowerCaseAlphabet -> x
lowerCaseAlphabet -> y
lowerCaseAlphabet -> z

upperCaseAlphabet -> A
upperCaseAlphabet -> B
upperCaseAlphabet -> C
upperCaseAlphabet -> D
upperCaseAlphabet -> E
upperCaseAlphabet -> F
upperCaseAlphabet -> G
upperCaseAlphabet -> H
upperCaseAlphabet -> I
upperCaseAlphabet -> J
upperCaseAlphabet -> K
upperCaseAlphabet -> L
upperCaseAlphabet -> M
upperCaseAlphabet -> N
upperCaseAlphabet -> O
upperCaseAlphabet -> P
upperCaseAlphabet -> Q
upperCaseAlphabet -> R
upperCaseAlphabet -> S
upperCaseAlphabet -> T
upperCaseAlphabet -> U
upperCaseAlphabet -> V
upperCaseAlphabet -> W
upperCaseAlphabet -> X
upperCaseAlphabet -> Y
upperCaseAlphabet -> Z

alphabet -> lowerCaseAlphabet
alphabet -> upperCaseAlphabet
alphabet -> _

alphabets -> alphabet alphabets
alphabets -> alphabet

number -> digit number
number -> digit
digit -> 0
digit -> 1
digit -> 2
digit -> 3
digit -> 4
digit -> 5
digit -> 6
digit -> 7
digit -> 8
digit -> 9

alnum -> alphabet
alnum -> digit

alphanumeral -> alnum alphanumeral 
alphanumeral -> alnum

constant -> integerConstant
constant -> + integerConstant
constant _> - integerConstant
constant -> floatConstant
constant -> booleanConstant
constant -> null

integerConstant -> number


floatConstant -> integerConstant floatPart
floatPart -> . number

booleanConstant	-> stonks
booleanConstant	-> not_stonks

arrayConstant -> [ ]
arrayConstant -> [ constant commaConst ]
arrayConstant -> [ constant ]
commaConst -> , constant commaConst
commaConst -> , constant

dataType -> intijur
dataType -> flote
dataType -> bulen
dataType -> strin
dataType -> char
dataType -> arrayType

arrayType -> array < elementType >
elementType -> flote
elementType -> bulen
elementType -> strin
elementType -> intijur

identifier -> alphabet
identifier -> alphabet alphanumeral

varName -> identifier

term -> constant
term -> varName
term -> varName [ expression ]
term -> ( expression )
term -> functionCall
term -> + term
term -> - term
term -> ! term

statement -> declarationStatement
statement -> letStatement
statement -> ifStatement
statement -> whileStatement
statement -> callStatement
statement -> returnStatement

declarationStatement -> dataType varName commaVar ;
declarationStatement -> dataType varName ;
declarationStatement -> dataType varName = expression ;
declarationStatement -> dataType varName = expression commaVar ;
commaVar -> , varName commaVar
commaVar -> , varName

letStatement -> let varName [ expression ] = expression ;
letStatement -> let varName = expression ;
letStatement -> let varName = arrayExpression ; 

ifStatement -> if ( expression ) { } else { }
ifStatement -> if ( expression ) { }
ifStatement -> if ( expression ) { } else { statements }
ifStatement -> if ( expression ) { statements }
ifStatement -> if ( expression ) { statements } else { }
ifStatement -> if ( expression ) { statements }
ifStatement -> if ( expression ) { statements } else { statements }
ifStatement -> if ( expression ) { }
ifStatement -> if ( expression ) { statements } else { }
ifStatement -> if ( expression ) { }
ifStatement -> if ( expression ) { } else { statements }
ifStatement -> if ( expression ) { }
ifStatement -> if ( expression ) { } else { }
ifStatement -> if ( expression ) { statements }
ifStatement -> if ( expression ) { statements } else { statements }
ifStatement -> if ( expression ) { statements }

whileStatement -> whil ( expression ) { statements }
whileStatement -> whil ( expression ) { }

callStatement -> coll functionCall

returnStatement -> retun expression ;
returnStatement -> retun arrayExpression ;

expression -> term opTerm
expression -> term
opTerm -> operator term opTerm
opTerm -> operator term

arrayExpression -> [ expression ]
arrayExpression -> [ expression commaExpr ]
commaExpr -> , expression commaExpr
commaExpr -> , expression

functionDefinition -> dataType funkshun functionName ( parameterList ) { statements returnStatement }
functionDefinition -> dataType funkshun functionName ( parameterList ) { returnStatement }
functionDefinition -> dataType funkshun functionName ( ) { statements returnStatement }
functionDefinition -> dataType funkshun functionName ( ) { returnStatement }
statements -> statement statements
statements -> statement

parameterList -> dataType identifier commaDataID
parameterList -> dataType identifier

commaDataID -> , dataType identifier commaDataID
commaDataID -> , dataType identifier

functionCall -> functionName ( ) ;
functionCall -> functionName ( term commaTerm ) ;
functionCall -> functionName ( term ) ;
commaTerm -> , term commaTerm
commaTerm -> , term
functionName -> identifier
