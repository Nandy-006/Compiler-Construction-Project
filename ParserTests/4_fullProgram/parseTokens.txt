  LINE  LEXEME           TOKEN ID  TOKEN
------  -------------  ----------  --------------
     4  intijur                 6  KEYWD_INT
     4  IDENTIFIER             69  IDENTIFIER
     4  =                      51  SYM_ASSIGN
     4  LITERAL_INT            69  IDENTIFIER
     4  ;                      38  SYM_SEMICOLON
     5  char                   15  KEYWD_CHAR
     5  IDENTIFIER             69  IDENTIFIER
     5  =                      51  SYM_ASSIGN
     5  LITERAL_CHAR           69  IDENTIFIER
     5  ;                      38  SYM_SEMICOLON
     6  array                  11  KEYWD_ARRAY
     6  <                      46  SYM_LT
     6  intijur                 6  KEYWD_INT
     6  >                      45  SYM_GT
     6  IDENTIFIER             69  IDENTIFIER
     6  ;                      38  SYM_SEMICOLON
     7  let                    14  KEYWD_LET
     7  IDENTIFIER             69  IDENTIFIER
     7  =                      51  SYM_ASSIGN
     7  [                      36  SYM_OP_BRACK
     7  LITERAL_INT            69  IDENTIFIER
     7  ,                      39  SYM_COMMA
     7  LITERAL_INT            69  IDENTIFIER
     7  *                      42  SYM_ASTERISK
     7  IDENTIFIER             69  IDENTIFIER
     7  ,                      39  SYM_COMMA
     7  IDENTIFIER             69  IDENTIFIER
     7  +                      40  SYM_PLUS
     7  LITERAL_INT            69  IDENTIFIER
     7  /                      43  SYM_SLASH
     7  IDENTIFIER             69  IDENTIFIER
     7  ,                      39  SYM_COMMA
     7  IDENTIFIER             69  IDENTIFIER
     7  ]                      37  SYM_CL_BRACK
     7  ;                      38  SYM_SEMICOLON
    11  intijur                 6  KEYWD_INT
    11  funkshun               10  KEYWD_FUNCTION
    11  IDENTIFIER             69  IDENTIFIER
    11  (                      34  SYM_OP_PAR
    11  char                   15  KEYWD_CHAR
    11  IDENTIFIER             69  IDENTIFIER
    11  ,                      39  SYM_COMMA
    11  intijur                 6  KEYWD_INT
    11  IDENTIFIER             69  IDENTIFIER
    11  )                      35  SYM_CL_PAR
    11  {                      32  SYM_OP_CURLY
    12  if                      1  KEYWD_IF
    12  (                      34  SYM_OP_PAR
    12  IDENTIFIER             69  IDENTIFIER
    12  !=                     50  SYM_NOTEQ
    12  LITERAL_CHAR           69  IDENTIFIER
    12  )                      35  SYM_CL_PAR
    12  {                      32  SYM_OP_CURLY
    13  retun                   5  KEYWD_RETURN
    13  LITERAL_INT            69  IDENTIFIER
    13  ;                      38  SYM_SEMICOLON
    14  }                      33  SYM_CL_CURLY
    16  let                    14  KEYWD_LET
    16  IDENTIFIER             69  IDENTIFIER
    16  [                      36  SYM_OP_BRACK
    16  LITERAL_INT            69  IDENTIFIER
    16  *                      42  SYM_ASTERISK
    16  IDENTIFIER             69  IDENTIFIER
    16  ]                      37  SYM_CL_BRACK
    16  =                      51  SYM_ASSIGN
    16  LITERAL_INT            69  IDENTIFIER
    16  -                      41  SYM_MINUS
    16  (                      34  SYM_OP_PAR
    16  IDENTIFIER             69  IDENTIFIER
    16  /                      43  SYM_SLASH
    16  LITERAL_INT            69  IDENTIFIER
    16  )                      35  SYM_CL_PAR
    16  ;                      38  SYM_SEMICOLON
    17  coll                   12  KEYWD_CALL
    17  IDENTIFIER             69  IDENTIFIER
    17  (                      34  SYM_OP_PAR
    17  (                      34  SYM_OP_PAR
    17  LITERAL_CHAR           69  IDENTIFIER
    17  +                      40  SYM_PLUS
    17  IDENTIFIER             69  IDENTIFIER
    17  )                      35  SYM_CL_PAR
    17  ,                      39  SYM_COMMA
    17  (                      34  SYM_OP_PAR
    17  LITERAL_INT            69  IDENTIFIER
    17  *                      42  SYM_ASTERISK
    17  IDENTIFIER             69  IDENTIFIER
    17  )                      35  SYM_CL_PAR
    17  )                      35  SYM_CL_PAR
    17  ;                      38  SYM_SEMICOLON
    18  retun                   5  KEYWD_RETURN
    18  IDENTIFIER             69  IDENTIFIER
    18  ;                      38  SYM_SEMICOLON
    19  }                      33  SYM_CL_CURLY
    23  if                      1  KEYWD_IF
    23  (                      34  SYM_OP_PAR
    23  IDENTIFIER             69  IDENTIFIER
    23  [                      36  SYM_OP_BRACK
    23  LITERAL_INT            69  IDENTIFIER
    23  ]                      37  SYM_CL_BRACK
    23  *                      42  SYM_ASTERISK
    23  IDENTIFIER             69  IDENTIFIER
    23  (                      34  SYM_OP_PAR
    23  IDENTIFIER             69  IDENTIFIER
    23  (                      34  SYM_OP_PAR
    23  LITERAL_FLOAT          69  IDENTIFIER
    23  )                      35  SYM_CL_PAR
    23  )                      35  SYM_CL_PAR
    23  >=                     47  SYM_GTEQ
    23  LITERAL_INT            69  IDENTIFIER
    23  &&                     53  SYM_AND
    23  IDENTIFIER             69  IDENTIFIER
    23  <                      46  SYM_LT
    23  LITERAL_INT            69  IDENTIFIER
    23  )                      35  SYM_CL_PAR
    23  {                      32  SYM_OP_CURLY
    24  bulen                   8  KEYWD_BOOL
    24  IDENTIFIER             69  IDENTIFIER
    24  =                      51  SYM_ASSIGN
    24  !                      54  SYM_NOT
    24  (                      34  SYM_OP_PAR
    24  IDENTIFIER             69  IDENTIFIER
    24  *                      42  SYM_ASTERISK
    24  -                      41  SYM_MINUS
    24  LITERAL_FLOAT          69  IDENTIFIER
    24  ==                     49  SYM_ISEQ
    24  LITERAL_FLOAT          69  IDENTIFIER
    24  )                      35  SYM_CL_PAR
    24  ;                      38  SYM_SEMICOLON
    25  }                      33  SYM_CL_CURLY
    25  else                    2  KEYWD_ELSE
    25  {                      32  SYM_OP_CURLY
    26  whil                    0  KEYWD_WHILE
    26  (                      34  SYM_OP_PAR
    26  IDENTIFIER             69  IDENTIFIER
    26  !=                     50  SYM_NOTEQ
    26  IDENTIFIER             69  IDENTIFIER
    26  (                      34  SYM_OP_PAR
    26  LITERAL_INT            69  IDENTIFIER
    26  )                      35  SYM_CL_PAR
    26  )                      35  SYM_CL_PAR
    26  {                      32  SYM_OP_CURLY
    27  let                    14  KEYWD_LET
    27  IDENTIFIER             69  IDENTIFIER
    27  =                      51  SYM_ASSIGN
    27  IDENTIFIER             69  IDENTIFIER
    27  %                      44  SYM_PERC
    27  LITERAL_INT            69  IDENTIFIER
    27  ;                      38  SYM_SEMICOLON
    28  let                    14  KEYWD_LET
    28  IDENTIFIER             69  IDENTIFIER
    28  =                      51  SYM_ASSIGN
    28  IDENTIFIER             69  IDENTIFIER
    28  (                      34  SYM_OP_PAR
    28  LITERAL_CHAR           69  IDENTIFIER
    28  ,                      39  SYM_COMMA
    28  IDENTIFIER             69  IDENTIFIER
    28  )                      35  SYM_CL_PAR
    28  ;                      38  SYM_SEMICOLON
    29  }                      33  SYM_CL_CURLY
    31  if                      1  KEYWD_IF
    31  (                      34  SYM_OP_PAR
    31  IDENTIFIER             69  IDENTIFIER
    31  ==                     49  SYM_ISEQ
    31  stonks                  3  KEYWD_TRUE
    31  )                      35  SYM_CL_PAR
    31  {                      32  SYM_OP_CURLY
    32  let                    14  KEYWD_LET
    32  IDENTIFIER             69  IDENTIFIER
    32  =                      51  SYM_ASSIGN
    32  not_stonks              4  KEYWD_FALSE
    32  ;                      38  SYM_SEMICOLON
    33  let                    14  KEYWD_LET
    33  IDENTIFIER             69  IDENTIFIER
    33  =                      51  SYM_ASSIGN
    33  LITERAL_CHAR           69  IDENTIFIER
    33  ;                      38  SYM_SEMICOLON
    34  }                      33  SYM_CL_CURLY
    35  let                    14  KEYWD_LET
    35  IDENTIFIER             69  IDENTIFIER
    35  =                      51  SYM_ASSIGN
    35  -                      41  SYM_MINUS
    35  (                      34  SYM_OP_PAR
    35  IDENTIFIER             69  IDENTIFIER
    35  (                      34  SYM_OP_PAR
    35  LITERAL_CHAR           69  IDENTIFIER
    35  ,                      39  SYM_COMMA
    35  LITERAL_INT            69  IDENTIFIER
    35  )                      35  SYM_CL_PAR
    35  )                      35  SYM_CL_PAR
    35  ;                      38  SYM_SEMICOLON
    36  }                      33  SYM_CL_CURLY