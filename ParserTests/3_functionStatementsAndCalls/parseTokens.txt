  LINE  LEXEME           TOKEN ID  TOKEN
------  -------------  ----------  --------------
     1  intijur                 6  KEYWD_INT
     1  funkshun               10  KEYWD_FUNCTION
     1  IDENTIFIER             69  IDENTIFIER
     1  (                      34  SYM_OP_PAR
     1  array                  11  KEYWD_ARRAY
     1  <                      46  SYM_LT
     1  intijur                 6  KEYWD_INT
     1  >                      45  SYM_GT
     1  IDENTIFIER             69  IDENTIFIER
     1  ,                      39  SYM_COMMA
     1  intijur                 6  KEYWD_INT
     1  IDENTIFIER             69  IDENTIFIER
     1  )                      35  SYM_CL_PAR
     1  {                      32  SYM_OP_CURLY
     2  coll                   12  KEYWD_CALL
     2  IDENTIFIER             69  IDENTIFIER
     2  (                      34  SYM_OP_PAR
     2  IDENTIFIER             69  IDENTIFIER
     2  ,                      39  SYM_COMMA
     2  IDENTIFIER             69  IDENTIFIER
     2  )                      35  SYM_CL_PAR
     2  ;                      38  SYM_SEMICOLON
     4  bulen                   8  KEYWD_BOOL
     4  IDENTIFIER             69  IDENTIFIER
     4  =                      51  SYM_ASSIGN
     4  IDENTIFIER             69  IDENTIFIER
     4  (                      34  SYM_OP_PAR
     4  IDENTIFIER             69  IDENTIFIER
     4  ,                      39  SYM_COMMA
     4  IDENTIFIER             69  IDENTIFIER
     4  (                      34  SYM_OP_PAR
     4  LITERAL_INT            69  IDENTIFIER
     4  )                      35  SYM_CL_PAR
     4  )                      35  SYM_CL_PAR
     4  ;                      38  SYM_SEMICOLON
     6  whil                    0  KEYWD_WHILE
     6  (                      34  SYM_OP_PAR
     6  IDENTIFIER             69  IDENTIFIER
     6  (                      34  SYM_OP_PAR
     6  IDENTIFIER             69  IDENTIFIER
     6  ,                      39  SYM_COMMA
     6  LITERAL_INT            69  IDENTIFIER
     6  )                      35  SYM_CL_PAR
     6  ||                     52  SYM_OR
     6  IDENTIFIER             69  IDENTIFIER
     6  (                      34  SYM_OP_PAR
     6  LITERAL_FLOAT          69  IDENTIFIER
     6  )                      35  SYM_CL_PAR
     6  &&                     53  SYM_AND
     6  !                      54  SYM_NOT
     6  IDENTIFIER             69  IDENTIFIER
     6  )                      35  SYM_CL_PAR
     6  {                      32  SYM_OP_CURLY
     7  if                      1  KEYWD_IF
     7  (                      34  SYM_OP_PAR
     7  IDENTIFIER             69  IDENTIFIER
     7  (                      34  SYM_OP_PAR
     7  )                      35  SYM_CL_PAR
     7  &&                     53  SYM_AND
     7  -                      41  SYM_MINUS
     7  LITERAL_INT            69  IDENTIFIER
     7  >                      45  SYM_GT
     7  LITERAL_INT            69  IDENTIFIER
     7  )                      35  SYM_CL_PAR
     7  {                      32  SYM_OP_CURLY
     8  retun                   5  KEYWD_RETURN
     8  LITERAL_INT            69  IDENTIFIER
     8  ;                      38  SYM_SEMICOLON
     9  }                      33  SYM_CL_CURLY
     9  else                    2  KEYWD_ELSE
     9  {                      32  SYM_OP_CURLY
    10  let                    14  KEYWD_LET
    10  IDENTIFIER             69  IDENTIFIER
    10  =                      51  SYM_ASSIGN
    10  not_stonks              4  KEYWD_FALSE
    10  ;                      38  SYM_SEMICOLON
    11  }                      33  SYM_CL_CURLY
    12  }                      33  SYM_CL_CURLY
    14  retun                   5  KEYWD_RETURN
    14  IDENTIFIER             69  IDENTIFIER
    14  ;                      38  SYM_SEMICOLON
    15  }                      33  SYM_CL_CURLY